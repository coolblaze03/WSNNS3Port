/* This file was generated by PyBindGen 0.15.0.795 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "ns3/core-module.h"
#include <fstream>
#include <typeinfo>
#include <ostream>
#include <sstream>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject PyNs3AttributeConstructionList_Type;

extern std::map<void*, PyObject*> PyNs3AttributeConstructionList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject PyNs3AttributeConstructionListItem_Type;

extern std::map<void*, PyObject*> PyNs3AttributeConstructionListItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject PyNs3CallbackBase_Type;

extern std::map<void*, PyObject*> PyNs3CallbackBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CommandLine *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CommandLine;


extern PyTypeObject PyNs3CommandLine_Type;

extern std::map<void*, PyObject*> PyNs3CommandLine_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CriticalSection *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CriticalSection;


extern PyTypeObject PyNs3CriticalSection_Type;

extern std::map<void*, PyObject*> PyNs3CriticalSection_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject PyNs3EventId_Type;

extern std::map<void*, PyObject*> PyNs3EventId_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalValue;


extern PyTypeObject PyNs3GlobalValue_Type;

extern std::map<void*, PyObject*> PyNs3GlobalValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 0 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__0;


extern PyTypeObject PyNs3IntToType__0_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__0_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 1 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__1;


extern PyTypeObject PyNs3IntToType__1_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__1_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 2 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__2;


extern PyTypeObject PyNs3IntToType__2_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__2_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 3 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__3;


extern PyTypeObject PyNs3IntToType__3_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__3_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 4 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__4;


extern PyTypeObject PyNs3IntToType__4_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 5 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__5;


extern PyTypeObject PyNs3IntToType__5_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__5_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 6 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__6;


extern PyTypeObject PyNs3IntToType__6_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject PyNs3LogComponent_Type;

extern std::map<void*, PyObject*> PyNs3LogComponent_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Names *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Names;


extern PyTypeObject PyNs3Names_Type;

extern std::map<void*, PyObject*> PyNs3Names_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject PyNs3ObjectBase_Type;

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;
    PyNs3ObjectBase__PythonHelper()
        : ns3::ObjectBase(), m_pyself(NULL)
        {}

    PyNs3ObjectBase__PythonHelper(ns3::ObjectBase const & arg0)
        : ns3::ObjectBase(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_ConstructSelf(PyNs3ObjectBase *self, PyObject *args, PyObject *kwargs);
    inline void ConstructSelf__parent_caller(ns3::AttributeConstructionList const & attributes)
    { ns3::ObjectBase::ConstructSelf(attributes); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ObjectBase *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyConstructionCompleted();
};

extern std::map<void*, PyObject*> PyNs3ObjectBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject PyNs3ObjectDeleter_Type;

extern std::map<void*, PyObject*> PyNs3ObjectDeleter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject PyNs3ObjectFactory_Type;

extern std::map<void*, PyObject*> PyNs3ObjectFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RandomVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariable;


extern PyTypeObject PyNs3RandomVariable_Type;

extern std::map<void*, PyObject*> PyNs3RandomVariable_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RngStream *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngStream;


extern PyTypeObject PyNs3RngStream_Type;

extern std::map<void*, PyObject*> PyNs3RngStream_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SeedManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SeedManager;


extern PyTypeObject PyNs3SeedManager_Type;

extern std::map<void*, PyObject*> PyNs3SeedManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SequentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialVariable;


extern PyTypeObject PyNs3SequentialVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject PyNs3Simulator_Type;

extern std::map<void*, PyObject*> PyNs3Simulator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemCondition *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemCondition;


extern PyTypeObject PyNs3SystemCondition_Type;

extern std::map<void*, PyObject*> PyNs3SystemCondition_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemMutex *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemMutex;


extern PyTypeObject PyNs3SystemMutex_Type;

extern std::map<void*, PyObject*> PyNs3SystemMutex_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemWallClockMs *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemWallClockMs;


extern PyTypeObject PyNs3SystemWallClockMs_Type;

extern std::map<void*, PyObject*> PyNs3SystemWallClockMs_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Timer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Timer;


extern PyTypeObject PyNs3Timer_Type;

extern std::map<void*, PyObject*> PyNs3Timer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TimerImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimerImpl;


extern PyTypeObject PyNs3TimerImpl_Type;

class PyNs3TimerImpl__PythonHelper : public ns3::TimerImpl
{
public:
    PyObject *m_pyself;
    PyNs3TimerImpl__PythonHelper()
        : ns3::TimerImpl(), m_pyself(NULL)
        {}

    PyNs3TimerImpl__PythonHelper(ns3::TimerImpl const & arg0)
        : ns3::TimerImpl(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimerImpl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Invoke();

    virtual ns3::EventId Schedule(ns3::Time const & delay);
};

extern std::map<void*, PyObject*> PyNs3TimerImpl_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TriangularVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularVariable;


extern PyTypeObject PyNs3TriangularVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject PyNs3TypeId_Type;

extern std::map<void*, PyObject*> PyNs3TypeId_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject PyNs3TypeIdAttributeInformation_Type;

extern std::map<void*, PyObject*> PyNs3TypeIdAttributeInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject PyNs3TypeIdTraceSourceInformation_Type;

extern std::map<void*, PyObject*> PyNs3TypeIdTraceSourceInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UniformVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformVariable;


extern PyTypeObject PyNs3UniformVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject PyNs3Vector2D_Type;

extern std::map<void*, PyObject*> PyNs3Vector2D_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject PyNs3Vector3D_Type;

extern std::map<void*, PyObject*> PyNs3Vector3D_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Watchdog *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Watchdog;


extern PyTypeObject PyNs3Watchdog_Type;

extern std::map<void*, PyObject*> PyNs3Watchdog_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WeibullVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullVariable;


extern PyTypeObject PyNs3WeibullVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ZetaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaVariable;


extern PyTypeObject PyNs3ZetaVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ZipfVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfVariable;


extern PyTypeObject PyNs3ZipfVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject PyNs3Empty_Type;

extern std::map<void*, PyObject*> PyNs3Empty_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject PyNs3Int64x64_t_Type;

extern std::map<void*, PyObject*> PyNs3Int64x64_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ConstantVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVariable;


extern PyTypeObject PyNs3ConstantVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::DeterministicVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicVariable;


extern PyTypeObject PyNs3DeterministicVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalVariable;


extern PyTypeObject PyNs3EmpiricalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ErlangVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangVariable;


extern PyTypeObject PyNs3ErlangVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ExponentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialVariable;


extern PyTypeObject PyNs3ExponentialVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::GammaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaVariable;


extern PyTypeObject PyNs3GammaVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::IntEmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntEmpiricalVariable;


extern PyTypeObject PyNs3IntEmpiricalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::LogNormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalVariable;


extern PyTypeObject PyNs3LogNormalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::NormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalVariable;


extern PyTypeObject PyNs3NormalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject PyNs3Object_Type;

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;
    PyNs3Object__PythonHelper()
        : ns3::Object(), m_pyself(NULL)
        {}

    PyNs3Object__PythonHelper(ns3::Object const & o)
        : ns3::Object(o), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Object *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Object *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Object *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoStart(PyNs3Object *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3Object *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Object__PythonHelper")
        .SetParent< ns3::Object > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Object__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject PyNs3ObjectAggregateIterator_Type;

extern std::map<void*, PyObject*> PyNs3ObjectAggregateIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ParetoVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoVariable;


extern PyTypeObject PyNs3ParetoVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::Scheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Scheduler;


extern PyTypeObject PyNs3Scheduler_Type;

class PyNs3Scheduler__PythonHelper : public ns3::Scheduler
{
public:
    PyObject *m_pyself;
    PyNs3Scheduler__PythonHelper()
        : ns3::Scheduler(), m_pyself(NULL)
        {}

    PyNs3Scheduler__PythonHelper(ns3::Scheduler const & arg0)
        : ns3::Scheduler(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Scheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Scheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Scheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Scheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoStart(PyNs3Scheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3Scheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Scheduler__PythonHelper")
        .SetParent< ns3::Scheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Scheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Scheduler::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchedulerEvent;


extern PyTypeObject PyNs3SchedulerEvent_Type;

extern std::map<void*, PyObject*> PyNs3SchedulerEvent_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Scheduler::EventKey *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchedulerEventKey;


extern PyTypeObject PyNs3SchedulerEventKey_Type;

extern std::map<void*, PyObject*> PyNs3SchedulerEventKey_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::FdReader, ns3::empty, ns3::DefaultDeleter<ns3::FdReader> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3FdReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3FdReader__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3FdReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3FdReader__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3FdReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3FdReader__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::RefCountBase, ns3::empty, ns3::DefaultDeleter<ns3::RefCountBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SystemThread, ns3::empty, ns3::DefaultDeleter<ns3::SystemThread> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimulatorImpl;


extern PyTypeObject PyNs3SimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::Synchronizer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Synchronizer;


extern PyTypeObject PyNs3Synchronizer_Type;

class PyNs3Synchronizer__PythonHelper : public ns3::Synchronizer
{
public:
    PyObject *m_pyself;
    PyNs3Synchronizer__PythonHelper(ns3::Synchronizer const & arg0)
        : ns3::Synchronizer(arg0), m_pyself(NULL)
        {}

    PyNs3Synchronizer__PythonHelper()
        : ns3::Synchronizer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Synchronizer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Synchronizer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Synchronizer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Synchronizer *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_DoStart(PyNs3Synchronizer *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3Synchronizer *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    virtual uint64_t DoEventEnd();

    virtual void DoEventStart();

    virtual uint64_t DoGetCurrentRealtime();

    virtual int64_t DoGetDrift(uint64_t ns);

    virtual bool DoRealtime();

    virtual void DoSetCondition(bool arg0);

    virtual void DoSetOrigin(uint64_t ns);

    virtual void DoSignal();

    virtual bool DoSynchronize(uint64_t nsCurrent, uint64_t nsDelay);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Synchronizer__PythonHelper")
        .SetParent< ns3::Synchronizer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Synchronizer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SystemThread *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemThread;


extern PyTypeObject PyNs3SystemThread_Type;


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject PyNs3Time_Type;

extern std::map<void*, PyObject*> PyNs3Time_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject PyNs3TraceSourceAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::WallClockSynchronizer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WallClockSynchronizer;


extern PyTypeObject PyNs3WallClockSynchronizer_Type;
extern PyTypeObject PyNs3WallClockSynchronizerMeta_Type;

class PyNs3WallClockSynchronizer__PythonHelper : public ns3::WallClockSynchronizer
{
public:
    PyObject *m_pyself;
    PyNs3WallClockSynchronizer__PythonHelper(ns3::WallClockSynchronizer const & arg0)
        : ns3::WallClockSynchronizer(arg0), m_pyself(NULL)
        {}

    PyNs3WallClockSynchronizer__PythonHelper()
        : ns3::WallClockSynchronizer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WallClockSynchronizer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoSetOrigin(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline void DoSetOrigin__parent_caller(uint64_t ns)
    { ns3::WallClockSynchronizer::DoSetOrigin(ns); }

    static PyObject * _wrap_DriftCorrect(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline uint64_t DriftCorrect__parent_caller(uint64_t nsNow, uint64_t nsDelay)
    { return ns3::WallClockSynchronizer::DriftCorrect(nsNow, nsDelay); }

    static PyObject * _wrap_SpinWait(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline bool SpinWait__parent_caller(uint64_t arg0)
    { return ns3::WallClockSynchronizer::SpinWait(arg0); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3WallClockSynchronizer *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoDispose(PyNs3WallClockSynchronizer *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_GetRealtime(PyNs3WallClockSynchronizer *self);
    inline uint64_t GetRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::GetRealtime(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WallClockSynchronizer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoEventEnd(PyNs3WallClockSynchronizer *self);
    inline uint64_t DoEventEnd__parent_caller()
    { return ns3::WallClockSynchronizer::DoEventEnd(); }

    static PyObject * _wrap_DoEventStart(PyNs3WallClockSynchronizer *self);
    inline void DoEventStart__parent_caller()
    { ns3::WallClockSynchronizer::DoEventStart(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WallClockSynchronizer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoStart(PyNs3WallClockSynchronizer *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoGetDrift(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline int64_t DoGetDrift__parent_caller(uint64_t ns)
    { return ns3::WallClockSynchronizer::DoGetDrift(ns); }

    static PyObject * _wrap_DoRealtime(PyNs3WallClockSynchronizer *self);
    inline bool DoRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::DoRealtime(); }

    static PyObject * _wrap_DoSetCondition(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline void DoSetCondition__parent_caller(bool cond)
    { ns3::WallClockSynchronizer::DoSetCondition(cond); }

    static PyObject * _wrap_DoGetCurrentRealtime(PyNs3WallClockSynchronizer *self);
    inline uint64_t DoGetCurrentRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::DoGetCurrentRealtime(); }

    static PyObject * _wrap_SleepWait(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline bool SleepWait__parent_caller(uint64_t arg0)
    { return ns3::WallClockSynchronizer::SleepWait(arg0); }

    static PyObject * _wrap_GetNormalizedRealtime(PyNs3WallClockSynchronizer *self);
    inline uint64_t GetNormalizedRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::GetNormalizedRealtime(); }

    static PyObject * _wrap_DoSynchronize(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline bool DoSynchronize__parent_caller(uint64_t nsCurrent, uint64_t nsDelay)
    { return ns3::WallClockSynchronizer::DoSynchronize(nsCurrent, nsDelay); }

    static PyObject * _wrap_DoSignal(PyNs3WallClockSynchronizer *self);
    inline void DoSignal__parent_caller()
    { ns3::WallClockSynchronizer::DoSignal(); }

    virtual uint64_t DoEventEnd();

    virtual void DoEventStart();

    virtual uint64_t DoGetCurrentRealtime();

    virtual int64_t DoGetDrift(uint64_t ns);

    virtual bool DoRealtime();

    virtual void DoSetCondition(bool cond);

    virtual void DoSetOrigin(uint64_t ns);

    virtual void DoSignal();

    virtual bool DoSynchronize(uint64_t nsCurrent, uint64_t nsDelay);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WallClockSynchronizer__PythonHelper")
        .SetParent< ns3::WallClockSynchronizer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WallClockSynchronizer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject PyNs3AttributeAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject PyNs3AttributeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject PyNs3AttributeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject PyNs3BooleanChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject PyNs3BooleanValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::CalendarScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CalendarScheduler;


extern PyTypeObject PyNs3CalendarScheduler_Type;

class PyNs3CalendarScheduler__PythonHelper : public ns3::CalendarScheduler
{
public:
    PyObject *m_pyself;
    PyNs3CalendarScheduler__PythonHelper(ns3::CalendarScheduler const & arg0)
        : ns3::CalendarScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3CalendarScheduler__PythonHelper()
        : ns3::CalendarScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CalendarScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CalendarScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Insert(PyNs3CalendarScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Insert__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::CalendarScheduler::Insert(ev); }

    static PyObject * _wrap_PeekNext(PyNs3CalendarScheduler *self);
    inline ns3::Scheduler::Event PeekNext__parent_caller()
    { return ns3::CalendarScheduler::PeekNext(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CalendarScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3CalendarScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_Remove(PyNs3CalendarScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Remove__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::CalendarScheduler::Remove(ev); }

    static PyObject * _wrap_IsEmpty(PyNs3CalendarScheduler *self);
    inline bool IsEmpty__parent_caller()
    { return ns3::CalendarScheduler::IsEmpty(); }

    static PyObject * _wrap_DoStart(PyNs3CalendarScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3CalendarScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_RemoveNext(PyNs3CalendarScheduler *self);
    inline ns3::Scheduler::Event RemoveNext__parent_caller()
    { return ns3::CalendarScheduler::RemoveNext(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CalendarScheduler__PythonHelper")
        .SetParent< ns3::CalendarScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CalendarScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject PyNs3CallbackChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject PyNs3CallbackImplBase_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject PyNs3CallbackValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::DefaultSimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultSimulatorImpl;


extern PyTypeObject PyNs3DefaultSimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject PyNs3DoubleValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject PyNs3EmptyAttributeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject PyNs3EnumChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject PyNs3EnumValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject PyNs3EventImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::FdReader *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdReader;


extern PyTypeObject PyNs3FdReader_Type;


typedef struct {
    PyObject_HEAD
    ns3::HeapScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeapScheduler;


extern PyTypeObject PyNs3HeapScheduler_Type;

class PyNs3HeapScheduler__PythonHelper : public ns3::HeapScheduler
{
public:
    PyObject *m_pyself;
    PyNs3HeapScheduler__PythonHelper(ns3::HeapScheduler const & arg0)
        : ns3::HeapScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3HeapScheduler__PythonHelper()
        : ns3::HeapScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3HeapScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3HeapScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Insert(PyNs3HeapScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Insert__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::HeapScheduler::Insert(ev); }

    static PyObject * _wrap_PeekNext(PyNs3HeapScheduler *self);
    inline ns3::Scheduler::Event PeekNext__parent_caller()
    { return ns3::HeapScheduler::PeekNext(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3HeapScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3HeapScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_Remove(PyNs3HeapScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Remove__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::HeapScheduler::Remove(ev); }

    static PyObject * _wrap_IsEmpty(PyNs3HeapScheduler *self);
    inline bool IsEmpty__parent_caller()
    { return ns3::HeapScheduler::IsEmpty(); }

    static PyObject * _wrap_DoStart(PyNs3HeapScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3HeapScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_RemoveNext(PyNs3HeapScheduler *self);
    inline ns3::Scheduler::Event RemoveNext__parent_caller()
    { return ns3::HeapScheduler::RemoveNext(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3HeapScheduler__PythonHelper")
        .SetParent< ns3::HeapScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3HeapScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject PyNs3IntegerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ListScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListScheduler;


extern PyTypeObject PyNs3ListScheduler_Type;

class PyNs3ListScheduler__PythonHelper : public ns3::ListScheduler
{
public:
    PyObject *m_pyself;
    PyNs3ListScheduler__PythonHelper(ns3::ListScheduler const & arg0)
        : ns3::ListScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3ListScheduler__PythonHelper()
        : ns3::ListScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ListScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Insert(PyNs3ListScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Insert__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::ListScheduler::Insert(ev); }

    static PyObject * _wrap_PeekNext(PyNs3ListScheduler *self);
    inline ns3::Scheduler::Event PeekNext__parent_caller()
    { return ns3::ListScheduler::PeekNext(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ListScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ListScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_Remove(PyNs3ListScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Remove__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::ListScheduler::Remove(ev); }

    static PyObject * _wrap_IsEmpty(PyNs3ListScheduler *self);
    inline bool IsEmpty__parent_caller()
    { return ns3::ListScheduler::IsEmpty(); }

    static PyObject * _wrap_DoStart(PyNs3ListScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3ListScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_RemoveNext(PyNs3ListScheduler *self);
    inline ns3::Scheduler::Event RemoveNext__parent_caller()
    { return ns3::ListScheduler::RemoveNext(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ListScheduler__PythonHelper")
        .SetParent< ns3::ListScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ListScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MapScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MapScheduler;


extern PyTypeObject PyNs3MapScheduler_Type;

class PyNs3MapScheduler__PythonHelper : public ns3::MapScheduler
{
public:
    PyObject *m_pyself;
    PyNs3MapScheduler__PythonHelper(ns3::MapScheduler const & arg0)
        : ns3::MapScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3MapScheduler__PythonHelper()
        : ns3::MapScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MapScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MapScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Insert(PyNs3MapScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Insert__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::MapScheduler::Insert(ev); }

    static PyObject * _wrap_PeekNext(PyNs3MapScheduler *self);
    inline ns3::Scheduler::Event PeekNext__parent_caller()
    { return ns3::MapScheduler::PeekNext(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MapScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3MapScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_Remove(PyNs3MapScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Remove__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::MapScheduler::Remove(ev); }

    static PyObject * _wrap_IsEmpty(PyNs3MapScheduler *self);
    inline bool IsEmpty__parent_caller()
    { return ns3::MapScheduler::IsEmpty(); }

    static PyObject * _wrap_DoStart(PyNs3MapScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3MapScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_RemoveNext(PyNs3MapScheduler *self);
    inline ns3::Scheduler::Event RemoveNext__parent_caller()
    { return ns3::MapScheduler::RemoveNext(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MapScheduler__PythonHelper")
        .SetParent< ns3::MapScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MapScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ns2CalendarScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ns2CalendarScheduler;


extern PyTypeObject PyNs3Ns2CalendarScheduler_Type;

class PyNs3Ns2CalendarScheduler__PythonHelper : public ns3::Ns2CalendarScheduler
{
public:
    PyObject *m_pyself;
    PyNs3Ns2CalendarScheduler__PythonHelper(ns3::Ns2CalendarScheduler const & arg0)
        : ns3::Ns2CalendarScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3Ns2CalendarScheduler__PythonHelper()
        : ns3::Ns2CalendarScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ns2CalendarScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ns2CalendarScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Insert(PyNs3Ns2CalendarScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Insert__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::Ns2CalendarScheduler::Insert(ev); }

    static PyObject * _wrap_PeekNext(PyNs3Ns2CalendarScheduler *self);
    inline ns3::Scheduler::Event PeekNext__parent_caller()
    { return ns3::Ns2CalendarScheduler::PeekNext(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ns2CalendarScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ns2CalendarScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_Remove(PyNs3Ns2CalendarScheduler *self, PyObject *args, PyObject *kwargs);
    inline void Remove__parent_caller(ns3::Scheduler::Event const & ev)
    { ns3::Ns2CalendarScheduler::Remove(ev); }

    static PyObject * _wrap_IsEmpty(PyNs3Ns2CalendarScheduler *self);
    inline bool IsEmpty__parent_caller()
    { return ns3::Ns2CalendarScheduler::IsEmpty(); }

    static PyObject * _wrap_DoStart(PyNs3Ns2CalendarScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3Ns2CalendarScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_RemoveNext(PyNs3Ns2CalendarScheduler *self);
    inline ns3::Scheduler::Event RemoveNext__parent_caller()
    { return ns3::Ns2CalendarScheduler::RemoveNext(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ns2CalendarScheduler__PythonHelper")
        .SetParent< ns3::Ns2CalendarScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ns2CalendarScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject PyNs3ObjectFactoryChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject PyNs3ObjectFactoryValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectPtrContainerAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectPtrContainerAccessor;


extern PyTypeObject PyNs3ObjectPtrContainerAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectPtrContainerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectPtrContainerChecker;


extern PyTypeObject PyNs3ObjectPtrContainerChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectPtrContainerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectPtrContainerValue;


extern PyTypeObject PyNs3ObjectPtrContainerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject PyNs3PointerChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject PyNs3PointerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableChecker;


extern PyTypeObject PyNs3RandomVariableChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableValue;


extern PyTypeObject PyNs3RandomVariableValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::RealtimeSimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RealtimeSimulatorImpl;


extern PyTypeObject PyNs3RealtimeSimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::RefCountBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RefCountBase;


extern PyTypeObject PyNs3RefCountBase_Type;


typedef struct {
    PyObject_HEAD
    ns3::StringChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringChecker;


extern PyTypeObject PyNs3StringChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::StringValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringValue;


extern PyTypeObject PyNs3StringValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::TimeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeChecker;


extern PyTypeObject PyNs3TimeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject PyNs3TimeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject PyNs3TypeIdChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject PyNs3TypeIdValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject PyNs3UintegerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject PyNs3Vector2DChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject PyNs3Vector2DValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject PyNs3Vector3DChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject PyNs3Vector3DValue_Type;


typedef struct {
    PyObject_HEAD
    ::std::ostream *obj;
    PyBindGenWrapperFlags flags:8;
} PyStdOstream;


extern PyTypeObject PyStdOstream_Type;

extern std::map<void*, PyObject*> PyStdOstream_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ::std::ofstream *obj;
    PyBindGenWrapperFlags flags:8;
} PyStdOfstream;


extern PyTypeObject PyStdOfstream_Type;

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Config::MatchContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigMatchContainer;


extern PyTypeObject PyNs3ConfigMatchContainer_Type;

extern std::map<void*, PyObject*> PyNs3ConfigMatchContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Object > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Object > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Object > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);

class PythonCallbackImpl1 : public ns3::CallbackImpl<bool, std::string, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(std::string arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        const char *arg1_ptr;
        Py_ssize_t arg1_len;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        arg1_ptr = (arg1).c_str();
        arg1_len = (arg1).size();
        args = Py_BuildValue((char *) "(s#)", arg1_ptr, arg1_len);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Object___gt__(PyObject *value, ns3::Ptr< ns3::Object > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


PyObject* _wrap_convert_c2py__ns3__int64x64_t(ns3::int64x64_t *cvalue);


int _wrap_convert_py2c__ns3__int64x64_t(PyObject *value, ns3::int64x64_t *address);


int _wrap_convert_py2c__long_long_unsigned_int_const(PyObject *value, long long unsigned int *address);


int _wrap_convert_py2c__long_unsigned_int_const(PyObject *value, long unsigned int *address);


int _wrap_convert_py2c__unsigned_int_const(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__unsigned_char_const(PyObject *value, unsigned char *address);


int _wrap_convert_py2c__long_long_int_const(PyObject *value, long long int *address);


int _wrap_convert_py2c__long_int_const(PyObject *value, long int *address);


int _wrap_convert_py2c__int_const(PyObject *value, int *address);


int _wrap_convert_py2c__short_int_const(PyObject *value, short int *address);


int _wrap_convert_py2c__signed_char_const(PyObject *value, signed char *address);


int _wrap_convert_py2c__double_const(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__int64x64_t_const___amp__(PyObject *value, ns3::int64x64_t *address);


PyObject* _wrap_convert_c2py__ns3__Time(ns3::Time *cvalue);


int _wrap_convert_py2c__ns3__Time(PyObject *value, ns3::Time *address);


int _wrap_convert_py2c__ns3__Time_const___amp__(PyObject *value, ns3::Time *address);

