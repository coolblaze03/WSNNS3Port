/* This file was generated by PyBindGen 0.15.0.795 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "ns3/lte-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject *_PyNs3BandInfo_Type;
#define PyNs3BandInfo_Type (*_PyNs3BandInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;
#define PyNs3BandInfo_wrapper_registry (*_PyNs3BandInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject *_PyNs3DataRate_Type;
#define PyNs3DataRate_Type (*_PyNs3DataRate_Type)

extern std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;
#define PyNs3DataRate_wrapper_registry (*_PyNs3DataRate_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IpcsClassifierRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IpcsClassifierRecord;


extern PyTypeObject *_PyNs3IpcsClassifierRecord_Type;
#define PyNs3IpcsClassifierRecord_Type (*_PyNs3IpcsClassifierRecord_Type)

extern std::map<void*, PyObject*> *_PyNs3IpcsClassifierRecord_wrapper_registry;
#define PyNs3IpcsClassifierRecord_wrapper_registry (*_PyNs3IpcsClassifierRecord_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject *_PyNs3LogComponent_Type;
#define PyNs3LogComponent_Type (*_PyNs3LogComponent_Type)

extern std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;
#define PyNs3LogComponent_wrapper_registry (*_PyNs3LogComponent_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RandomVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariable;


extern PyTypeObject *_PyNs3RandomVariable_Type;
#define PyNs3RandomVariable_Type (*_PyNs3RandomVariable_Type)

extern std::map<void*, PyObject*> *_PyNs3RandomVariable_wrapper_registry;
#define PyNs3RandomVariable_wrapper_registry (*_PyNs3RandomVariable_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SeedManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SeedManager;


extern PyTypeObject *_PyNs3SeedManager_Type;
#define PyNs3SeedManager_Type (*_PyNs3SeedManager_Type)

extern std::map<void*, PyObject*> *_PyNs3SeedManager_wrapper_registry;
#define PyNs3SeedManager_wrapper_registry (*_PyNs3SeedManager_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SequentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialVariable;


extern PyTypeObject *_PyNs3SequentialVariable_Type;
#define PyNs3SequentialVariable_Type (*_PyNs3SequentialVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumType *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumType;


extern PyTypeObject *_PyNs3SpectrumType_Type;
#define PyNs3SpectrumType_Type (*_PyNs3SpectrumType_Type)

extern std::map<void*, PyObject*> *_PyNs3SpectrumType_wrapper_registry;
#define PyNs3SpectrumType_wrapper_registry (*_PyNs3SpectrumType_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SpectrumTypeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumTypeFactory;


extern PyTypeObject *_PyNs3SpectrumTypeFactory_Type;
#define PyNs3SpectrumTypeFactory_Type (*_PyNs3SpectrumTypeFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3SpectrumTypeFactory_wrapper_registry;
#define PyNs3SpectrumTypeFactory_wrapper_registry (*_PyNs3SpectrumTypeFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TlvValue;


extern PyTypeObject *_PyNs3TlvValue_Type;
#define PyNs3TlvValue_Type (*_PyNs3TlvValue_Type)

extern std::map<void*, PyObject*> *_PyNs3TlvValue_wrapper_registry;
#define PyNs3TlvValue_wrapper_registry (*_PyNs3TlvValue_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TosTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TosTlvValue;


extern PyTypeObject *_PyNs3TosTlvValue_Type;
#define PyNs3TosTlvValue_Type (*_PyNs3TosTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularVariable;


extern PyTypeObject *_PyNs3TriangularVariable_Type;
#define PyNs3TriangularVariable_Type (*_PyNs3TriangularVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::U16TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3U16TlvValue;


extern PyTypeObject *_PyNs3U16TlvValue_Type;
#define PyNs3U16TlvValue_Type (*_PyNs3U16TlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::U32TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3U32TlvValue;


extern PyTypeObject *_PyNs3U32TlvValue_Type;
#define PyNs3U32TlvValue_Type (*_PyNs3U32TlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::U8TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3U8TlvValue;


extern PyTypeObject *_PyNs3U8TlvValue_Type;
#define PyNs3U8TlvValue_Type (*_PyNs3U8TlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UniformVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformVariable;


extern PyTypeObject *_PyNs3UniformVariable_Type;
#define PyNs3UniformVariable_Type (*_PyNs3UniformVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::VectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VectorTlvValue;


extern PyTypeObject *_PyNs3VectorTlvValue_Type;
#define PyNs3VectorTlvValue_Type (*_PyNs3VectorTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::WeibullVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullVariable;


extern PyTypeObject *_PyNs3WeibullVariable_Type;
#define PyNs3WeibullVariable_Type (*_PyNs3WeibullVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ZetaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaVariable;


extern PyTypeObject *_PyNs3ZetaVariable_Type;
#define PyNs3ZetaVariable_Type (*_PyNs3ZetaVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ZipfVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfVariable;


extern PyTypeObject *_PyNs3ZipfVariable_Type;
#define PyNs3ZipfVariable_Type (*_PyNs3ZipfVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::ClassificationRuleVectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ClassificationRuleVectorTlvValue;


extern PyTypeObject *_PyNs3ClassificationRuleVectorTlvValue_Type;
#define PyNs3ClassificationRuleVectorTlvValue_Type (*_PyNs3ClassificationRuleVectorTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ConstantVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVariable;


extern PyTypeObject *_PyNs3ConstantVariable_Type;
#define PyNs3ConstantVariable_Type (*_PyNs3ConstantVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::CsParamVectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsParamVectorTlvValue;


extern PyTypeObject *_PyNs3CsParamVectorTlvValue_Type;
#define PyNs3CsParamVectorTlvValue_Type (*_PyNs3CsParamVectorTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicVariable;


extern PyTypeObject *_PyNs3DeterministicVariable_Type;
#define PyNs3DeterministicVariable_Type (*_PyNs3DeterministicVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalVariable;


extern PyTypeObject *_PyNs3EmpiricalVariable_Type;
#define PyNs3EmpiricalVariable_Type (*_PyNs3EmpiricalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangVariable;


extern PyTypeObject *_PyNs3ErlangVariable_Type;
#define PyNs3ErlangVariable_Type (*_PyNs3ErlangVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialVariable;


extern PyTypeObject *_PyNs3ExponentialVariable_Type;
#define PyNs3ExponentialVariable_Type (*_PyNs3ExponentialVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::GammaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaVariable;


extern PyTypeObject *_PyNs3GammaVariable_Type;
#define PyNs3GammaVariable_Type (*_PyNs3GammaVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::IntEmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntEmpiricalVariable;


extern PyTypeObject *_PyNs3IntEmpiricalVariable_Type;
#define PyNs3IntEmpiricalVariable_Type (*_PyNs3IntEmpiricalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressTlvValue;


extern PyTypeObject *_PyNs3Ipv4AddressTlvValue_Type;
#define PyNs3Ipv4AddressTlvValue_Type (*_PyNs3Ipv4AddressTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressTlvValue::ipv4Addr *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressTlvValueIpv4Addr;


extern PyTypeObject *_PyNs3Ipv4AddressTlvValueIpv4Addr_Type;
#define PyNs3Ipv4AddressTlvValueIpv4Addr_Type (*_PyNs3Ipv4AddressTlvValueIpv4Addr_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry;
#define PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry (*_PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogNormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalVariable;


extern PyTypeObject *_PyNs3LogNormalVariable_Type;
#define PyNs3LogNormalVariable_Type (*_PyNs3LogNormalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::NormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalVariable;


extern PyTypeObject *_PyNs3NormalVariable_Type;
#define PyNs3NormalVariable_Type (*_PyNs3NormalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketBurst *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketBurst;


extern PyTypeObject *_PyNs3PacketBurst_Type;
#define PyNs3PacketBurst_Type (*_PyNs3PacketBurst_Type)

class PyNs3PacketBurst__PythonHelper : public ns3::PacketBurst
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketBurst__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ParetoVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoVariable;


extern PyTypeObject *_PyNs3ParetoVariable_Type;
#define PyNs3ParetoVariable_Type (*_PyNs3ParetoVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::PortRangeTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PortRangeTlvValue;


extern PyTypeObject *_PyNs3PortRangeTlvValue_Type;
#define PyNs3PortRangeTlvValue_Type (*_PyNs3PortRangeTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::PortRangeTlvValue::PortRange *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PortRangeTlvValuePortRange;


extern PyTypeObject *_PyNs3PortRangeTlvValuePortRange_Type;
#define PyNs3PortRangeTlvValuePortRange_Type (*_PyNs3PortRangeTlvValuePortRange_Type)

extern std::map<void*, PyObject*> *_PyNs3PortRangeTlvValuePortRange_wrapper_registry;
#define PyNs3PortRangeTlvValuePortRange_wrapper_registry (*_PyNs3PortRangeTlvValuePortRange_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ProtocolTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ProtocolTlvValue;


extern PyTypeObject *_PyNs3ProtocolTlvValue_Type;
#define PyNs3ProtocolTlvValue_Type (*_PyNs3ProtocolTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::SfVectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SfVectorTlvValue;


extern PyTypeObject *_PyNs3SfVectorTlvValue_Type;
#define PyNs3SfVectorTlvValue_Type (*_PyNs3SfVectorTlvValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumInterference;


extern PyTypeObject *_PyNs3SpectrumInterference_Type;
#define PyNs3SpectrumInterference_Type (*_PyNs3SpectrumInterference_Type)

class PyNs3SpectrumInterference__PythonHelper : public ns3::SpectrumInterference
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject *_PyNs3SpectrumModel_Type;
#define PyNs3SpectrumModel_Type (*_PyNs3SpectrumModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhy;


extern PyTypeObject *_PyNs3SpectrumPhy_Type;
#define PyNs3SpectrumPhy_Type (*_PyNs3SpectrumPhy_Type)

class PyNs3SpectrumPhy__PythonHelper : public ns3::SpectrumPhy
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPropagationLossModel;


extern PyTypeObject *_PyNs3SpectrumPropagationLossModel_Type;
#define PyNs3SpectrumPropagationLossModel_Type (*_PyNs3SpectrumPropagationLossModel_Type)

class PyNs3SpectrumPropagationLossModel__PythonHelper : public ns3::SpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject *_PyNs3SpectrumValue_Type;
#define PyNs3SpectrumValue_Type (*_PyNs3SpectrumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tlv *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tlv;


extern PyTypeObject *_PyNs3Tlv_Type;
#define PyNs3Tlv_Type (*_PyNs3Tlv_Type)


typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject *_PyNs3DataRateChecker_Type;
#define PyNs3DataRateChecker_Type (*_PyNs3DataRateChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject *_PyNs3DataRateValue_Type;
#define PyNs3DataRateValue_Type (*_PyNs3DataRateValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)

class PyNs3NetDevice__PythonHelper : public ns3::NetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableChecker;


extern PyTypeObject *_PyNs3RandomVariableChecker_Type;
#define PyNs3RandomVariableChecker_Type (*_PyNs3RandomVariableChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableValue;


extern PyTypeObject *_PyNs3RandomVariableValue_Type;
#define PyNs3RandomVariableValue_Type (*_PyNs3RandomVariableValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannel;


extern PyTypeObject *_PyNs3SpectrumChannel_Type;
#define PyNs3SpectrumChannel_Type (*_PyNs3SpectrumChannel_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeChecker;


extern PyTypeObject *_PyNs3TimeChecker_Type;
#define PyNs3TimeChecker_Type (*_PyNs3TimeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::SingleModelSpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SingleModelSpectrumChannel;


extern PyTypeObject *_PyNs3SingleModelSpectrumChannel_Type;
#define PyNs3SingleModelSpectrumChannel_Type (*_PyNs3SingleModelSpectrumChannel_Type)


typedef struct {
    PyObject_HEAD
    ns3::LteHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHelper;


extern PyTypeObject PyNs3LteHelper_Type;

extern std::map<void*, PyObject*> PyNs3LteHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumValueHelper;


extern PyTypeObject PyNs3LteSpectrumValueHelper_Type;

extern std::map<void*, PyObject*> PyNs3LteSpectrumValueHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacHeader;


extern PyTypeObject PyNs3LteMacHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::PacketScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketScheduler;


extern PyTypeObject PyNs3PacketScheduler_Type;

class PyNs3PacketScheduler__PythonHelper : public ns3::PacketScheduler
{
public:
    PyObject *m_pyself;
    PyNs3PacketScheduler__PythonHelper(ns3::PacketScheduler const & arg0)
        : ns3::PacketScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3PacketScheduler__PythonHelper()
        : ns3::PacketScheduler(), m_pyself(NULL)
        {}

    PyNs3PacketScheduler__PythonHelper(ns3::Ptr< ns3::EnbNetDevice > enb)
        : ns3::PacketScheduler(enb), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PacketScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PacketScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3PacketScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3PacketScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PacketScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::PacketScheduler::DoDispose(); }

    virtual void DoDispose();

    virtual void DoRunPacketScheduler();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PacketScheduler__PythonHelper")
        .SetParent< ns3::PacketScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PacketScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RadioBearerInstance *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadioBearerInstance;


extern PyTypeObject PyNs3RadioBearerInstance_Type;

class PyNs3RadioBearerInstance__PythonHelper : public ns3::RadioBearerInstance
{
public:
    PyObject *m_pyself;
    PyNs3RadioBearerInstance__PythonHelper(ns3::RadioBearerInstance const & arg0)
        : ns3::RadioBearerInstance(arg0), m_pyself(NULL)
        {}

    PyNs3RadioBearerInstance__PythonHelper()
        : ns3::RadioBearerInstance(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RadioBearerInstance__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RadioBearerInstance *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RadioBearerInstance *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RadioBearerInstance *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3RadioBearerInstance *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RadioBearerInstance__PythonHelper")
        .SetParent< ns3::RadioBearerInstance > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RadioBearerInstance__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RlcEntity *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RlcEntity;


extern PyTypeObject PyNs3RlcEntity_Type;

class PyNs3RlcEntity__PythonHelper : public ns3::RlcEntity
{
public:
    PyObject *m_pyself;
    PyNs3RlcEntity__PythonHelper(ns3::RlcEntity const & arg0)
        : ns3::RlcEntity(arg0), m_pyself(NULL)
        {}

    PyNs3RlcEntity__PythonHelper()
        : ns3::RlcEntity(), m_pyself(NULL)
        {}

    PyNs3RlcEntity__PythonHelper(ns3::Ptr< ns3::LteNetDevice > d)
        : ns3::RlcEntity(d), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RlcEntity__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RlcEntity *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RlcEntity *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3RlcEntity *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3RlcEntity *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RlcEntity *self);
    inline void DoDispose__parent_caller()
    { ns3::RlcEntity::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RlcEntity__PythonHelper")
        .SetParent< ns3::RlcEntity > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RlcEntity__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RrcEntity *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcEntity;


extern PyTypeObject PyNs3RrcEntity_Type;

class PyNs3RrcEntity__PythonHelper : public ns3::RrcEntity
{
public:
    PyObject *m_pyself;
    PyNs3RrcEntity__PythonHelper(ns3::RrcEntity const & arg0)
        : ns3::RrcEntity(arg0), m_pyself(NULL)
        {}

    PyNs3RrcEntity__PythonHelper()
        : ns3::RrcEntity(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RrcEntity__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RrcEntity *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RrcEntity *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3RrcEntity *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3RrcEntity *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RrcEntity *self);
    inline void DoDispose__parent_caller()
    { ns3::RrcEntity::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RrcEntity__PythonHelper")
        .SetParent< ns3::RrcEntity > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RrcEntity__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimplePacketScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimplePacketScheduler;


extern PyTypeObject PyNs3SimplePacketScheduler_Type;

class PyNs3SimplePacketScheduler__PythonHelper : public ns3::SimplePacketScheduler
{
public:
    PyObject *m_pyself;
    PyNs3SimplePacketScheduler__PythonHelper(ns3::SimplePacketScheduler const & arg0)
        : ns3::SimplePacketScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3SimplePacketScheduler__PythonHelper()
        : ns3::SimplePacketScheduler(), m_pyself(NULL)
        {}

    PyNs3SimplePacketScheduler__PythonHelper(ns3::Ptr< ns3::EnbNetDevice > enb)
        : ns3::SimplePacketScheduler(enb), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SimplePacketScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SimplePacketScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SimplePacketScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3SimplePacketScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::PacketScheduler::DoDispose(); }

    static PyObject * _wrap_DoStart(PyNs3SimplePacketScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3SimplePacketScheduler *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoRunPacketScheduler(PyNs3SimplePacketScheduler *self);
    inline void DoRunPacketScheduler__parent_caller()
    { ns3::SimplePacketScheduler::DoRunPacketScheduler(); }

    virtual void DoRunPacketScheduler();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SimplePacketScheduler__PythonHelper")
        .SetParent< ns3::SimplePacketScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SimplePacketScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::IdealControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::IdealControlMessage> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3IdealControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3IdealControlMessage__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3IdealControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3IdealControlMessage__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3IdealControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3IdealControlMessage__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::UeManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeManager;


extern PyTypeObject PyNs3UeManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::UeRecord *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeRecord;


extern PyTypeObject PyNs3UeRecord_Type;


typedef struct {
    PyObject_HEAD
    ns3::UeRecord::CqiFeedback *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeRecordCqiFeedback;


extern PyTypeObject PyNs3UeRecordCqiFeedback_Type;

extern std::map<void*, PyObject*> PyNs3UeRecordCqiFeedback_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AmcModule *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmcModule;


extern PyTypeObject PyNs3AmcModule_Type;


typedef struct {
    PyObject_HEAD
    ns3::BearerQosParameters *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BearerQosParameters;


extern PyTypeObject PyNs3BearerQosParameters_Type;


typedef struct {
    PyObject_HEAD
    ns3::ChannelRealization *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelRealization;


extern PyTypeObject PyNs3ChannelRealization_Type;


typedef struct {
    PyObject_HEAD
    ns3::DiscreteTimeLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DiscreteTimeLossModel;


extern PyTypeObject PyNs3DiscreteTimeLossModel_Type;


typedef struct {
    PyObject_HEAD
    ns3::IdealControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IdealControlMessage;


extern PyTypeObject PyNs3IdealControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::JakesFadingLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3JakesFadingLossModel;


extern PyTypeObject PyNs3JakesFadingLossModel_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteMacQueue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacQueue;


extern PyTypeObject PyNs3LteMacQueue_Type;


typedef struct {
    PyObject_HEAD
    ns3::LtePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePhy;


extern PyTypeObject PyNs3LtePhy_Type;

class PyNs3LtePhy__PythonHelper : public ns3::LtePhy
{
public:
    PyObject *m_pyself;
    PyNs3LtePhy__PythonHelper(ns3::LtePhy const & arg0)
        : ns3::LtePhy(arg0), m_pyself(NULL)
        {}

    PyNs3LtePhy__PythonHelper()
        : ns3::LtePhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LtePhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoSetDownlinkSubChannels(PyNs3LtePhy *self);
    inline void DoSetDownlinkSubChannels__parent_caller()
    { ns3::LtePhy::DoSetDownlinkSubChannels(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LtePhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3LtePhy *self);
    inline void DoDispose__parent_caller()
    { ns3::LtePhy::DoDispose(); }

    static PyObject * _wrap_DoStart(PyNs3LtePhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3LtePhy *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoSetUplinkSubChannels(PyNs3LtePhy *self);
    inline void DoSetUplinkSubChannels__parent_caller()
    { ns3::LtePhy::DoSetUplinkSubChannels(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoDispose();

    virtual void DoSetDownlinkSubChannels();

    virtual void DoSetUplinkSubChannels();

    virtual void ReceiveIdealControlMessage(ns3::Ptr< ns3::IdealControlMessage > msg);

    virtual void SendIdealControlMessage(ns3::Ptr< ns3::IdealControlMessage > msg);

    virtual bool SendPacket(ns3::Ptr< ns3::PacketBurst > pb);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LtePhy__PythonHelper")
        .SetParent< ns3::LtePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LtePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LtePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePropagationLossModel;


extern PyTypeObject PyNs3LtePropagationLossModel_Type;

class PyNs3LtePropagationLossModel__PythonHelper : public ns3::LtePropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3LtePropagationLossModel__PythonHelper(ns3::LtePropagationLossModel const & arg0)
        : ns3::LtePropagationLossModel(arg0), m_pyself(NULL)
        {}

    PyNs3LtePropagationLossModel__PythonHelper()
        : ns3::LtePropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LtePropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LtePropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3LtePropagationLossModel *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3LtePropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3LtePropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::SpectrumPropagationLossModel::DoDispose(); }

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LtePropagationLossModel__PythonHelper")
        .SetParent< ns3::LtePropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LtePropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumPhy;


extern PyTypeObject PyNs3LteSpectrumPhy_Type;

class PyNs3LteSpectrumPhy__PythonHelper : public ns3::LteSpectrumPhy
{
public:
    PyObject *m_pyself;
    PyNs3LteSpectrumPhy__PythonHelper(ns3::LteSpectrumPhy const & arg0)
        : ns3::LteSpectrumPhy(arg0), m_pyself(NULL)
        {}

    PyNs3LteSpectrumPhy__PythonHelper()
        : ns3::LteSpectrumPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteSpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetRxSpectrumModel(PyNs3LteSpectrumPhy *self);
    inline ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel__parent_caller()
    { return ns3::LteSpectrumPhy::GetRxSpectrumModel(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteSpectrumPhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_SetMobility(PyNs3LteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetMobility__parent_caller(ns3::Ptr< ns3::Object > m)
    { ns3::LteSpectrumPhy::SetMobility(m); }

    static PyObject * _wrap_DoDispose(PyNs3LteSpectrumPhy *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteSpectrumPhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3LteSpectrumPhy *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3LteSpectrumPhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_SetChannel(PyNs3LteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetChannel__parent_caller(ns3::Ptr< ns3::SpectrumChannel > c)
    { ns3::LteSpectrumPhy::SetChannel(c); }

    static PyObject * _wrap_StartRx(PyNs3LteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void StartRx__parent_caller(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration)
    { ns3::LteSpectrumPhy::StartRx(pb, rxPsd, st, duration); }

    static PyObject * _wrap_SetDevice(PyNs3LteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetDevice__parent_caller(ns3::Ptr< ns3::Object > d)
    { ns3::LteSpectrumPhy::SetDevice(d); }

    static PyObject * _wrap_GetMobility(PyNs3LteSpectrumPhy *self);
    inline ns3::Ptr< ns3::Object > GetMobility__parent_caller()
    { return ns3::LteSpectrumPhy::GetMobility(); }

    static PyObject * _wrap_GetDevice(PyNs3LteSpectrumPhy *self);
    inline ns3::Ptr< ns3::Object > GetDevice__parent_caller()
    { return ns3::LteSpectrumPhy::GetDevice(); }

    virtual void CalcSinrValues(ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::Ptr< ns3::SpectrumValue const > noise);

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration);

    virtual void EndRx();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteSpectrumPhy__PythonHelper")
        .SetParent< ns3::LteSpectrumPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteSpectrumPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MacEntity *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacEntity;


extern PyTypeObject PyNs3MacEntity_Type;

class PyNs3MacEntity__PythonHelper : public ns3::MacEntity
{
public:
    PyObject *m_pyself;
    PyNs3MacEntity__PythonHelper(ns3::MacEntity const & arg0)
        : ns3::MacEntity(arg0), m_pyself(NULL)
        {}

    PyNs3MacEntity__PythonHelper()
        : ns3::MacEntity(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacEntity__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MacEntity *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MacEntity *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3MacEntity *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3MacEntity *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3MacEntity *self);
    inline void DoDispose__parent_caller()
    { ns3::MacEntity::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MacEntity__PythonHelper")
        .SetParent< ns3::MacEntity > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MacEntity__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PathLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PathLossModel;


extern PyTypeObject PyNs3PathLossModel_Type;


typedef struct {
    PyObject_HEAD
    ns3::PdcchMapIdealControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PdcchMapIdealControlMessage;


extern PyTypeObject PyNs3PdcchMapIdealControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::PdcchMapIdealControlMessage::IdealPdcchRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PdcchMapIdealControlMessageIdealPdcchRecord;


extern PyTypeObject PyNs3PdcchMapIdealControlMessageIdealPdcchRecord_Type;

extern std::map<void*, PyObject*> PyNs3PdcchMapIdealControlMessageIdealPdcchRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PenetrationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PenetrationLossModel;


extern PyTypeObject PyNs3PenetrationLossModel_Type;


typedef struct {
    PyObject_HEAD
    ns3::ShadowingLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ShadowingLossModel;


extern PyTypeObject PyNs3ShadowingLossModel_Type;


typedef struct {
    PyObject_HEAD
    ns3::UeLtePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeLtePhy;


extern PyTypeObject PyNs3UeLtePhy_Type;

class PyNs3UeLtePhy__PythonHelper : public ns3::UeLtePhy
{
public:
    PyObject *m_pyself;
    PyNs3UeLtePhy__PythonHelper(ns3::UeLtePhy const & arg0)
        : ns3::UeLtePhy(arg0), m_pyself(NULL)
        {}

    PyNs3UeLtePhy__PythonHelper()
        : ns3::UeLtePhy(), m_pyself(NULL)
        {}

    PyNs3UeLtePhy__PythonHelper(ns3::Ptr< ns3::LteNetDevice > d)
        : ns3::UeLtePhy(d), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UeLtePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_ReceiveIdealControlMessage(PyNs3UeLtePhy *self, PyObject *args, PyObject *kwargs);
    inline void ReceiveIdealControlMessage__parent_caller(ns3::Ptr< ns3::IdealControlMessage > msg)
    { ns3::UeLtePhy::ReceiveIdealControlMessage(msg); }

    static PyObject * _wrap_DoSetDownlinkSubChannels(PyNs3UeLtePhy *self);
    inline void DoSetDownlinkSubChannels__parent_caller()
    { ns3::LtePhy::DoSetDownlinkSubChannels(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UeLtePhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UeLtePhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3UeLtePhy *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_CreateTxPowerSpectralDensity(PyNs3UeLtePhy *self);
    inline ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity__parent_caller()
    { return ns3::UeLtePhy::CreateTxPowerSpectralDensity(); }

    static PyObject * _wrap_DoStart(PyNs3UeLtePhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UeLtePhy *self);
    inline void DoDispose__parent_caller()
    { ns3::LtePhy::DoDispose(); }

    static PyObject * _wrap_SendPacket(PyNs3UeLtePhy *self, PyObject *args, PyObject *kwargs);
    inline bool SendPacket__parent_caller(ns3::Ptr< ns3::PacketBurst > pb)
    { return ns3::UeLtePhy::SendPacket(pb); }

    static PyObject * _wrap_SendIdealControlMessage(PyNs3UeLtePhy *self, PyObject *args, PyObject *kwargs);
    inline void SendIdealControlMessage__parent_caller(ns3::Ptr< ns3::IdealControlMessage > msg)
    { ns3::UeLtePhy::SendIdealControlMessage(msg); }

    static PyObject * _wrap_DoSetUplinkSubChannels(PyNs3UeLtePhy *self);
    inline void DoSetUplinkSubChannels__parent_caller()
    { ns3::UeLtePhy::DoSetUplinkSubChannels(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoSetUplinkSubChannels();

    virtual void ReceiveIdealControlMessage(ns3::Ptr< ns3::IdealControlMessage > msg);

    virtual void SendIdealControlMessage(ns3::Ptr< ns3::IdealControlMessage > msg);

    virtual bool SendPacket(ns3::Ptr< ns3::PacketBurst > pb);

    virtual void DoDispose();

    virtual void DoSetDownlinkSubChannels();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UeLtePhy__PythonHelper")
        .SetParent< ns3::UeLtePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UeLtePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UeLteSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeLteSpectrumPhy;


extern PyTypeObject PyNs3UeLteSpectrumPhy_Type;

class PyNs3UeLteSpectrumPhy__PythonHelper : public ns3::UeLteSpectrumPhy
{
public:
    PyObject *m_pyself;
    PyNs3UeLteSpectrumPhy__PythonHelper(ns3::UeLteSpectrumPhy const & arg0)
        : ns3::UeLteSpectrumPhy(arg0), m_pyself(NULL)
        {}

    PyNs3UeLteSpectrumPhy__PythonHelper()
        : ns3::UeLteSpectrumPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UeLteSpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetRxSpectrumModel(PyNs3UeLteSpectrumPhy *self);
    inline ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel__parent_caller()
    { return ns3::LteSpectrumPhy::GetRxSpectrumModel(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UeLteSpectrumPhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_SetMobility(PyNs3UeLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetMobility__parent_caller(ns3::Ptr< ns3::Object > m)
    { ns3::LteSpectrumPhy::SetMobility(m); }

    static PyObject * _wrap_DoDispose(PyNs3UeLteSpectrumPhy *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_CalcSinrValues(PyNs3UeLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void CalcSinrValues__parent_caller(ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::Ptr< ns3::SpectrumValue const > noise)
    { ns3::UeLteSpectrumPhy::CalcSinrValues(rxPsd, noise); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UeLteSpectrumPhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3UeLteSpectrumPhy *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3UeLteSpectrumPhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_SetChannel(PyNs3UeLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetChannel__parent_caller(ns3::Ptr< ns3::SpectrumChannel > c)
    { ns3::LteSpectrumPhy::SetChannel(c); }

    static PyObject * _wrap_StartRx(PyNs3UeLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void StartRx__parent_caller(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration)
    { ns3::LteSpectrumPhy::StartRx(pb, rxPsd, st, duration); }

    static PyObject * _wrap_SetDevice(PyNs3UeLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetDevice__parent_caller(ns3::Ptr< ns3::Object > d)
    { ns3::LteSpectrumPhy::SetDevice(d); }

    static PyObject * _wrap_GetMobility(PyNs3UeLteSpectrumPhy *self);
    inline ns3::Ptr< ns3::Object > GetMobility__parent_caller()
    { return ns3::LteSpectrumPhy::GetMobility(); }

    static PyObject * _wrap_GetDevice(PyNs3UeLteSpectrumPhy *self);
    inline ns3::Ptr< ns3::Object > GetDevice__parent_caller()
    { return ns3::LteSpectrumPhy::GetDevice(); }

    virtual void CalcSinrValues(ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::Ptr< ns3::SpectrumValue const > noise);

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual void EndRx();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UeLteSpectrumPhy__PythonHelper")
        .SetParent< ns3::UeLteSpectrumPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UeLteSpectrumPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UeMacEntity *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeMacEntity;


extern PyTypeObject PyNs3UeMacEntity_Type;


typedef struct {
    PyObject_HEAD
    ns3::CqiIdealControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiIdealControlMessage;


extern PyTypeObject PyNs3CqiIdealControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::CqiIdealControlMessage::CqiFeedback *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiIdealControlMessageCqiFeedback;


extern PyTypeObject PyNs3CqiIdealControlMessageCqiFeedback_Type;

extern std::map<void*, PyObject*> PyNs3CqiIdealControlMessageCqiFeedback_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EnbLtePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnbLtePhy;


extern PyTypeObject PyNs3EnbLtePhy_Type;

class PyNs3EnbLtePhy__PythonHelper : public ns3::EnbLtePhy
{
public:
    PyObject *m_pyself;
    PyNs3EnbLtePhy__PythonHelper(ns3::EnbLtePhy const & arg0)
        : ns3::EnbLtePhy(arg0), m_pyself(NULL)
        {}

    PyNs3EnbLtePhy__PythonHelper()
        : ns3::EnbLtePhy(), m_pyself(NULL)
        {}

    PyNs3EnbLtePhy__PythonHelper(ns3::Ptr< ns3::LteNetDevice > d)
        : ns3::EnbLtePhy(d), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnbLtePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_ReceiveIdealControlMessage(PyNs3EnbLtePhy *self, PyObject *args, PyObject *kwargs);
    inline void ReceiveIdealControlMessage__parent_caller(ns3::Ptr< ns3::IdealControlMessage > msg)
    { ns3::EnbLtePhy::ReceiveIdealControlMessage(msg); }

    static PyObject * _wrap_DoSetDownlinkSubChannels(PyNs3EnbLtePhy *self);
    inline void DoSetDownlinkSubChannels__parent_caller()
    { ns3::EnbLtePhy::DoSetDownlinkSubChannels(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EnbLtePhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EnbLtePhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3EnbLtePhy *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_CreateTxPowerSpectralDensity(PyNs3EnbLtePhy *self);
    inline ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity__parent_caller()
    { return ns3::EnbLtePhy::CreateTxPowerSpectralDensity(); }

    static PyObject * _wrap_DoStart(PyNs3EnbLtePhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3EnbLtePhy *self);
    inline void DoDispose__parent_caller()
    { ns3::LtePhy::DoDispose(); }

    static PyObject * _wrap_SendPacket(PyNs3EnbLtePhy *self, PyObject *args, PyObject *kwargs);
    inline bool SendPacket__parent_caller(ns3::Ptr< ns3::PacketBurst > pb)
    { return ns3::EnbLtePhy::SendPacket(pb); }

    static PyObject * _wrap_SendIdealControlMessage(PyNs3EnbLtePhy *self, PyObject *args, PyObject *kwargs);
    inline void SendIdealControlMessage__parent_caller(ns3::Ptr< ns3::IdealControlMessage > msg)
    { ns3::EnbLtePhy::SendIdealControlMessage(msg); }

    static PyObject * _wrap_DoSetUplinkSubChannels(PyNs3EnbLtePhy *self);
    inline void DoSetUplinkSubChannels__parent_caller()
    { ns3::LtePhy::DoSetUplinkSubChannels(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoSetDownlinkSubChannels();

    virtual void ReceiveIdealControlMessage(ns3::Ptr< ns3::IdealControlMessage > msg);

    virtual void SendIdealControlMessage(ns3::Ptr< ns3::IdealControlMessage > msg);

    virtual bool SendPacket(ns3::Ptr< ns3::PacketBurst > pb);

    virtual void DoDispose();

    virtual void DoSetUplinkSubChannels();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EnbLtePhy__PythonHelper")
        .SetParent< ns3::EnbLtePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EnbLtePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EnbLteSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnbLteSpectrumPhy;


extern PyTypeObject PyNs3EnbLteSpectrumPhy_Type;

class PyNs3EnbLteSpectrumPhy__PythonHelper : public ns3::EnbLteSpectrumPhy
{
public:
    PyObject *m_pyself;
    PyNs3EnbLteSpectrumPhy__PythonHelper(ns3::EnbLteSpectrumPhy const & arg0)
        : ns3::EnbLteSpectrumPhy(arg0), m_pyself(NULL)
        {}

    PyNs3EnbLteSpectrumPhy__PythonHelper()
        : ns3::EnbLteSpectrumPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnbLteSpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetRxSpectrumModel(PyNs3EnbLteSpectrumPhy *self);
    inline ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel__parent_caller()
    { return ns3::LteSpectrumPhy::GetRxSpectrumModel(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EnbLteSpectrumPhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_SetMobility(PyNs3EnbLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetMobility__parent_caller(ns3::Ptr< ns3::Object > m)
    { ns3::LteSpectrumPhy::SetMobility(m); }

    static PyObject * _wrap_DoDispose(PyNs3EnbLteSpectrumPhy *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_CalcSinrValues(PyNs3EnbLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void CalcSinrValues__parent_caller(ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::Ptr< ns3::SpectrumValue const > noise)
    { ns3::EnbLteSpectrumPhy::CalcSinrValues(rxPsd, noise); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EnbLteSpectrumPhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3EnbLteSpectrumPhy *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3EnbLteSpectrumPhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_SetChannel(PyNs3EnbLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetChannel__parent_caller(ns3::Ptr< ns3::SpectrumChannel > c)
    { ns3::LteSpectrumPhy::SetChannel(c); }

    static PyObject * _wrap_StartRx(PyNs3EnbLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void StartRx__parent_caller(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration)
    { ns3::LteSpectrumPhy::StartRx(pb, rxPsd, st, duration); }

    static PyObject * _wrap_SetDevice(PyNs3EnbLteSpectrumPhy *self, PyObject *args, PyObject *kwargs);
    inline void SetDevice__parent_caller(ns3::Ptr< ns3::Object > d)
    { ns3::LteSpectrumPhy::SetDevice(d); }

    static PyObject * _wrap_GetMobility(PyNs3EnbLteSpectrumPhy *self);
    inline ns3::Ptr< ns3::Object > GetMobility__parent_caller()
    { return ns3::LteSpectrumPhy::GetMobility(); }

    static PyObject * _wrap_GetDevice(PyNs3EnbLteSpectrumPhy *self);
    inline ns3::Ptr< ns3::Object > GetDevice__parent_caller()
    { return ns3::LteSpectrumPhy::GetDevice(); }

    virtual void CalcSinrValues(ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::Ptr< ns3::SpectrumValue const > noise);

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual void EndRx();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EnbLteSpectrumPhy__PythonHelper")
        .SetParent< ns3::EnbLteSpectrumPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EnbLteSpectrumPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EnbMacEntity *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnbMacEntity;


extern PyTypeObject PyNs3EnbMacEntity_Type;

class PyNs3EnbMacEntity__PythonHelper : public ns3::EnbMacEntity
{
public:
    PyObject *m_pyself;
    PyNs3EnbMacEntity__PythonHelper(ns3::EnbMacEntity const & arg0)
        : ns3::EnbMacEntity(arg0), m_pyself(NULL)
        {}

    PyNs3EnbMacEntity__PythonHelper()
        : ns3::EnbMacEntity(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnbMacEntity__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EnbMacEntity *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EnbMacEntity *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3EnbMacEntity *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_DoStart(PyNs3EnbMacEntity *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3EnbMacEntity *self);
    inline void DoDispose__parent_caller()
    { ns3::EnbMacEntity::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EnbMacEntity__PythonHelper")
        .SetParent< ns3::EnbMacEntity > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EnbMacEntity__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteNetDevice;


extern PyTypeObject PyNs3LteNetDevice_Type;

class PyNs3LteNetDevice__PythonHelper : public ns3::LteNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3LteNetDevice__PythonHelper()
        : ns3::LteNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetMulticast(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    static PyObject * _wrap_GetMulticast__0(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception);
    static PyObject * _wrap_GetMulticast__1(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception);
    inline ns3::Address GetMulticast__parent_caller(ns3::Ipv4Address addr)
    { return ns3::LteNetDevice::GetMulticast(addr); }
    inline ns3::Address GetMulticast__parent_caller(ns3::Ipv6Address addr)
    { return ns3::LteNetDevice::GetMulticast(addr); }

    static PyObject * _wrap_IsPointToPoint(PyNs3LteNetDevice *self);
    inline bool IsPointToPoint__parent_caller()
    { return ns3::LteNetDevice::IsPointToPoint(); }

    static PyObject * _wrap_Send(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
    { return ns3::LteNetDevice::Send(packet, dest, protocolNumber); }

    static PyObject * _wrap_AddLinkChangeCallback(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void AddLinkChangeCallback__parent_caller(ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > callback)
    { ns3::LteNetDevice::AddLinkChangeCallback(callback); }

    static PyObject * _wrap_NeedsArp(PyNs3LteNetDevice *self);
    inline bool NeedsArp__parent_caller()
    { return ns3::LteNetDevice::NeedsArp(); }

    static PyObject * _wrap_SetPromiscReceiveCallback(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetPromiscReceiveCallback__parent_caller(ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > cb)
    { ns3::LteNetDevice::SetPromiscReceiveCallback(cb); }

    static PyObject * _wrap_GetNode(PyNs3LteNetDevice *self);
    inline ns3::Ptr< ns3::Node > GetNode__parent_caller()
    { return ns3::LteNetDevice::GetNode(); }

    static PyObject * _wrap_SendFrom(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SendFrom__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
    { return ns3::LteNetDevice::SendFrom(packet, source, dest, protocolNumber); }

    static PyObject * _wrap_IsBroadcast(PyNs3LteNetDevice *self);
    inline bool IsBroadcast__parent_caller()
    { return ns3::LteNetDevice::IsBroadcast(); }

    static PyObject * _wrap_GetMtu(PyNs3LteNetDevice *self);
    inline uint16_t GetMtu__parent_caller()
    { return ns3::LteNetDevice::GetMtu(); }

    static PyObject * _wrap_IsBridge(PyNs3LteNetDevice *self);
    inline bool IsBridge__parent_caller()
    { return ns3::LteNetDevice::IsBridge(); }

    static PyObject * _wrap_DoStart(PyNs3LteNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_SetNode(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetNode__parent_caller(ns3::Ptr< ns3::Node > node)
    { ns3::LteNetDevice::SetNode(node); }

    static PyObject * _wrap_DoDispose(PyNs3LteNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::LteNetDevice::DoDispose(); }

    static PyObject * _wrap_GetAddress(PyNs3LteNetDevice *self);
    inline ns3::Address GetAddress__parent_caller()
    { return ns3::LteNetDevice::GetAddress(); }

    static PyObject * _wrap_IsLinkUp(PyNs3LteNetDevice *self);
    inline bool IsLinkUp__parent_caller()
    { return ns3::LteNetDevice::IsLinkUp(); }

    static PyObject * _wrap_SetIfIndex(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetIfIndex__parent_caller(uint32_t const index)
    { ns3::LteNetDevice::SetIfIndex(index); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3LteNetDevice *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_SetAddress(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetAddress__parent_caller(ns3::Address address)
    { ns3::LteNetDevice::SetAddress(address); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_GetBroadcast(PyNs3LteNetDevice *self);
    inline ns3::Address GetBroadcast__parent_caller()
    { return ns3::LteNetDevice::GetBroadcast(); }

    static PyObject * _wrap_GetIfIndex(PyNs3LteNetDevice *self);
    inline uint32_t GetIfIndex__parent_caller()
    { return ns3::LteNetDevice::GetIfIndex(); }

    static PyObject * _wrap_SetReceiveCallback(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetReceiveCallback__parent_caller(ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > cb)
    { ns3::LteNetDevice::SetReceiveCallback(cb); }

    static PyObject * _wrap_IsMulticast(PyNs3LteNetDevice *self);
    inline bool IsMulticast__parent_caller()
    { return ns3::LteNetDevice::IsMulticast(); }

    static PyObject * _wrap_SetMtu(PyNs3LteNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SetMtu__parent_caller(uint16_t const mtu)
    { return ns3::LteNetDevice::SetMtu(mtu); }

    static PyObject * _wrap_SupportsSendFrom(PyNs3LteNetDevice *self);
    inline bool SupportsSendFrom__parent_caller()
    { return ns3::LteNetDevice::SupportsSendFrom(); }

    static PyObject * _wrap_GetChannel(PyNs3LteNetDevice *self);
    inline ns3::Ptr< ns3::Channel > GetChannel__parent_caller()
    { return ns3::LteNetDevice::GetChannel(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void SetIfIndex(uint32_t const index);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual uint16_t GetMtu() const;

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual bool IsBroadcast() const;

    virtual ns3::Address GetBroadcast() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool IsBridge() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool NeedsArp() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual void Start();

    virtual void Stop();

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SupportsSendFrom() const;

    virtual void StartTransmission();

    virtual bool SendPacket(ns3::Ptr< ns3::PacketBurst > p);

    virtual bool DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber);

    virtual void DoReceive(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteNetDevice__PythonHelper")
        .SetParent< ns3::LteNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeNetDevice;


extern PyTypeObject PyNs3UeNetDevice_Type;

class PyNs3UeNetDevice__PythonHelper : public ns3::UeNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3UeNetDevice__PythonHelper()
        : ns3::UeNetDevice(), m_pyself(NULL)
        {}

    PyNs3UeNetDevice__PythonHelper(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::LtePhy > phy)
        : ns3::UeNetDevice(node, phy), m_pyself(NULL)
        {}

    PyNs3UeNetDevice__PythonHelper(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::LtePhy > phy, ns3::Ptr< ns3::EnbNetDevice > targetEnb)
        : ns3::UeNetDevice(node, phy, targetEnb), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UeNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetMulticast(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    static PyObject * _wrap_GetMulticast__0(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception);
    static PyObject * _wrap_GetMulticast__1(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception);
    inline ns3::Address GetMulticast__parent_caller(ns3::Ipv4Address addr)
    { return ns3::LteNetDevice::GetMulticast(addr); }
    inline ns3::Address GetMulticast__parent_caller(ns3::Ipv6Address addr)
    { return ns3::LteNetDevice::GetMulticast(addr); }

    static PyObject * _wrap_IsPointToPoint(PyNs3UeNetDevice *self);
    inline bool IsPointToPoint__parent_caller()
    { return ns3::LteNetDevice::IsPointToPoint(); }

    static PyObject * _wrap_Send(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
    { return ns3::LteNetDevice::Send(packet, dest, protocolNumber); }

    static PyObject * _wrap_AddLinkChangeCallback(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void AddLinkChangeCallback__parent_caller(ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > callback)
    { ns3::LteNetDevice::AddLinkChangeCallback(callback); }

    static PyObject * _wrap_NeedsArp(PyNs3UeNetDevice *self);
    inline bool NeedsArp__parent_caller()
    { return ns3::LteNetDevice::NeedsArp(); }

    static PyObject * _wrap_SetPromiscReceiveCallback(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetPromiscReceiveCallback__parent_caller(ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > cb)
    { ns3::LteNetDevice::SetPromiscReceiveCallback(cb); }

    static PyObject * _wrap_GetNode(PyNs3UeNetDevice *self);
    inline ns3::Ptr< ns3::Node > GetNode__parent_caller()
    { return ns3::LteNetDevice::GetNode(); }

    static PyObject * _wrap_SendFrom(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SendFrom__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
    { return ns3::LteNetDevice::SendFrom(packet, source, dest, protocolNumber); }

    static PyObject * _wrap_IsBroadcast(PyNs3UeNetDevice *self);
    inline bool IsBroadcast__parent_caller()
    { return ns3::LteNetDevice::IsBroadcast(); }

    static PyObject * _wrap_Stop(PyNs3UeNetDevice *self);
    inline void Stop__parent_caller()
    { ns3::UeNetDevice::Stop(); }

    static PyObject * _wrap_StartTransmission(PyNs3UeNetDevice *self);
    inline void StartTransmission__parent_caller()
    { ns3::UeNetDevice::StartTransmission(); }

    static PyObject * _wrap_GetMtu(PyNs3UeNetDevice *self);
    inline uint16_t GetMtu__parent_caller()
    { return ns3::LteNetDevice::GetMtu(); }

    static PyObject * _wrap_IsBridge(PyNs3UeNetDevice *self);
    inline bool IsBridge__parent_caller()
    { return ns3::LteNetDevice::IsBridge(); }

    static PyObject * _wrap_DoStart(PyNs3UeNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_SetNode(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetNode__parent_caller(ns3::Ptr< ns3::Node > node)
    { ns3::LteNetDevice::SetNode(node); }

    static PyObject * _wrap_DoDispose(PyNs3UeNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::UeNetDevice::DoDispose(); }

    static PyObject * _wrap_GetAddress(PyNs3UeNetDevice *self);
    inline ns3::Address GetAddress__parent_caller()
    { return ns3::LteNetDevice::GetAddress(); }

    static PyObject * _wrap_IsLinkUp(PyNs3UeNetDevice *self);
    inline bool IsLinkUp__parent_caller()
    { return ns3::LteNetDevice::IsLinkUp(); }

    static PyObject * _wrap_SetIfIndex(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetIfIndex__parent_caller(uint32_t const index)
    { ns3::LteNetDevice::SetIfIndex(index); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3UeNetDevice *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_SendPacket(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SendPacket__parent_caller(ns3::Ptr< ns3::PacketBurst > p)
    { return ns3::UeNetDevice::SendPacket(p); }

    static PyObject * _wrap_SetAddress(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetAddress__parent_caller(ns3::Address address)
    { ns3::LteNetDevice::SetAddress(address); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UeNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_GetBroadcast(PyNs3UeNetDevice *self);
    inline ns3::Address GetBroadcast__parent_caller()
    { return ns3::LteNetDevice::GetBroadcast(); }

    static PyObject * _wrap_Start(PyNs3UeNetDevice *self);
    inline void Start__parent_caller()
    { ns3::UeNetDevice::Start(); }

    static PyObject * _wrap_SetReceiveCallback(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetReceiveCallback__parent_caller(ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > cb)
    { ns3::LteNetDevice::SetReceiveCallback(cb); }

    static PyObject * _wrap_IsMulticast(PyNs3UeNetDevice *self);
    inline bool IsMulticast__parent_caller()
    { return ns3::LteNetDevice::IsMulticast(); }

    static PyObject * _wrap_SetMtu(PyNs3UeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SetMtu__parent_caller(uint16_t const mtu)
    { return ns3::LteNetDevice::SetMtu(mtu); }

    static PyObject * _wrap_SupportsSendFrom(PyNs3UeNetDevice *self);
    inline bool SupportsSendFrom__parent_caller()
    { return ns3::LteNetDevice::SupportsSendFrom(); }

    static PyObject * _wrap_GetChannel(PyNs3UeNetDevice *self);
    inline ns3::Ptr< ns3::Channel > GetChannel__parent_caller()
    { return ns3::LteNetDevice::GetChannel(); }

    static PyObject * _wrap_GetIfIndex(PyNs3UeNetDevice *self);
    inline uint32_t GetIfIndex__parent_caller()
    { return ns3::LteNetDevice::GetIfIndex(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UeNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void Start();

    virtual void Stop();

    virtual void StartTransmission();

    virtual bool SendPacket(ns3::Ptr< ns3::PacketBurst > p);

    virtual bool DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber);

    virtual void DoReceive(ns3::Ptr< ns3::Packet > p);

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool IsPointToPoint() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool NeedsArp() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool IsBroadcast() const;

    virtual uint16_t GetMtu() const;

    virtual bool IsBridge() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetBroadcast() const;

    virtual uint32_t GetIfIndex() const;

    virtual bool IsMulticast() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UeNetDevice__PythonHelper")
        .SetParent< ns3::UeNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UeNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EnbNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnbNetDevice;


extern PyTypeObject PyNs3EnbNetDevice_Type;

class PyNs3EnbNetDevice__PythonHelper : public ns3::EnbNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3EnbNetDevice__PythonHelper()
        : ns3::EnbNetDevice(), m_pyself(NULL)
        {}

    PyNs3EnbNetDevice__PythonHelper(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::LtePhy > phy)
        : ns3::EnbNetDevice(node, phy), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnbNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetMulticast(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    static PyObject * _wrap_GetMulticast__0(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception);
    static PyObject * _wrap_GetMulticast__1(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception);
    inline ns3::Address GetMulticast__parent_caller(ns3::Ipv4Address addr)
    { return ns3::LteNetDevice::GetMulticast(addr); }
    inline ns3::Address GetMulticast__parent_caller(ns3::Ipv6Address addr)
    { return ns3::LteNetDevice::GetMulticast(addr); }

    static PyObject * _wrap_IsPointToPoint(PyNs3EnbNetDevice *self);
    inline bool IsPointToPoint__parent_caller()
    { return ns3::LteNetDevice::IsPointToPoint(); }

    static PyObject * _wrap_Send(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
    { return ns3::LteNetDevice::Send(packet, dest, protocolNumber); }

    static PyObject * _wrap_AddLinkChangeCallback(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void AddLinkChangeCallback__parent_caller(ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > callback)
    { ns3::LteNetDevice::AddLinkChangeCallback(callback); }

    static PyObject * _wrap_NeedsArp(PyNs3EnbNetDevice *self);
    inline bool NeedsArp__parent_caller()
    { return ns3::LteNetDevice::NeedsArp(); }

    static PyObject * _wrap_SetPromiscReceiveCallback(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetPromiscReceiveCallback__parent_caller(ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty > cb)
    { ns3::LteNetDevice::SetPromiscReceiveCallback(cb); }

    static PyObject * _wrap_GetNode(PyNs3EnbNetDevice *self);
    inline ns3::Ptr< ns3::Node > GetNode__parent_caller()
    { return ns3::LteNetDevice::GetNode(); }

    static PyObject * _wrap_SendFrom(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SendFrom__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
    { return ns3::LteNetDevice::SendFrom(packet, source, dest, protocolNumber); }

    static PyObject * _wrap_IsBroadcast(PyNs3EnbNetDevice *self);
    inline bool IsBroadcast__parent_caller()
    { return ns3::LteNetDevice::IsBroadcast(); }

    static PyObject * _wrap_Stop(PyNs3EnbNetDevice *self);
    inline void Stop__parent_caller()
    { ns3::EnbNetDevice::Stop(); }

    static PyObject * _wrap_StartTransmission(PyNs3EnbNetDevice *self);
    inline void StartTransmission__parent_caller()
    { ns3::EnbNetDevice::StartTransmission(); }

    static PyObject * _wrap_GetMtu(PyNs3EnbNetDevice *self);
    inline uint16_t GetMtu__parent_caller()
    { return ns3::LteNetDevice::GetMtu(); }

    static PyObject * _wrap_IsBridge(PyNs3EnbNetDevice *self);
    inline bool IsBridge__parent_caller()
    { return ns3::LteNetDevice::IsBridge(); }

    static PyObject * _wrap_DoStart(PyNs3EnbNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_SetNode(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetNode__parent_caller(ns3::Ptr< ns3::Node > node)
    { ns3::LteNetDevice::SetNode(node); }

    static PyObject * _wrap_DoDispose(PyNs3EnbNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::EnbNetDevice::DoDispose(); }

    static PyObject * _wrap_GetAddress(PyNs3EnbNetDevice *self);
    inline ns3::Address GetAddress__parent_caller()
    { return ns3::LteNetDevice::GetAddress(); }

    static PyObject * _wrap_IsLinkUp(PyNs3EnbNetDevice *self);
    inline bool IsLinkUp__parent_caller()
    { return ns3::LteNetDevice::IsLinkUp(); }

    static PyObject * _wrap_SetIfIndex(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetIfIndex__parent_caller(uint32_t const index)
    { ns3::LteNetDevice::SetIfIndex(index); }

    static PyObject * _wrap_GetInstanceTypeId(PyNs3EnbNetDevice *self);
    inline ns3::TypeId GetInstanceTypeId__parent_caller()
    { return ns3::Object::GetInstanceTypeId(); }

    static PyObject * _wrap_SendPacket(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SendPacket__parent_caller(ns3::Ptr< ns3::PacketBurst > p)
    { return ns3::EnbNetDevice::SendPacket(p); }

    static PyObject * _wrap_SetAddress(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetAddress__parent_caller(ns3::Address address)
    { ns3::LteNetDevice::SetAddress(address); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EnbNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_GetBroadcast(PyNs3EnbNetDevice *self);
    inline ns3::Address GetBroadcast__parent_caller()
    { return ns3::LteNetDevice::GetBroadcast(); }

    static PyObject * _wrap_Start(PyNs3EnbNetDevice *self);
    inline void Start__parent_caller()
    { ns3::EnbNetDevice::Start(); }

    static PyObject * _wrap_SetReceiveCallback(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void SetReceiveCallback__parent_caller(ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty > cb)
    { ns3::LteNetDevice::SetReceiveCallback(cb); }

    static PyObject * _wrap_IsMulticast(PyNs3EnbNetDevice *self);
    inline bool IsMulticast__parent_caller()
    { return ns3::LteNetDevice::IsMulticast(); }

    static PyObject * _wrap_SetMtu(PyNs3EnbNetDevice *self, PyObject *args, PyObject *kwargs);
    inline bool SetMtu__parent_caller(uint16_t const mtu)
    { return ns3::LteNetDevice::SetMtu(mtu); }

    static PyObject * _wrap_SupportsSendFrom(PyNs3EnbNetDevice *self);
    inline bool SupportsSendFrom__parent_caller()
    { return ns3::LteNetDevice::SupportsSendFrom(); }

    static PyObject * _wrap_GetChannel(PyNs3EnbNetDevice *self);
    inline ns3::Ptr< ns3::Channel > GetChannel__parent_caller()
    { return ns3::LteNetDevice::GetChannel(); }

    static PyObject * _wrap_GetIfIndex(PyNs3EnbNetDevice *self);
    inline uint32_t GetIfIndex__parent_caller()
    { return ns3::LteNetDevice::GetIfIndex(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EnbNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void Start();

    virtual void Stop();

    virtual void StartTransmission();

    virtual bool SendPacket(ns3::Ptr< ns3::PacketBurst > p);

    virtual bool DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber);

    virtual void DoReceive(ns3::Ptr< ns3::Packet > p);

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool IsPointToPoint() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool NeedsArp() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool IsBroadcast() const;

    virtual uint16_t GetMtu() const;

    virtual bool IsBridge() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetBroadcast() const;

    virtual uint32_t GetIfIndex() const;

    virtual bool IsMulticast() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EnbNetDevice__PythonHelper")
        .SetParent< ns3::EnbNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EnbNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    std::vector< int > *obj;
} Pystd__vector__lt___int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___int___gt__ *container;
    std::vector< int >::iterator *iterator;
} Pystd__vector__lt___int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___int___gt___Type;
extern PyTypeObject Pystd__vector__lt___int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector< int > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::Packet > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::Packet > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::Packet > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::RadioBearerInstance > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__RadioBearerInstance___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__RadioBearerInstance___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::RadioBearerInstance > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__RadioBearerInstance___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__RadioBearerInstance___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__RadioBearerInstance___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__RadioBearerInstance___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::RadioBearerInstance > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::UeRecord > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__UeRecord___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__UeRecord___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::UeRecord > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__UeRecord___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__UeRecord___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__UeRecord___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__UeRecord___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::UeRecord > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UeRecord::CqiFeedback > *obj;
} Pystd__vector__lt___ns3__UeRecord__CqiFeedback___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UeRecord__CqiFeedback___gt__ *container;
    std::vector< ns3::UeRecord::CqiFeedback >::iterator *iterator;
} Pystd__vector__lt___ns3__UeRecord__CqiFeedback___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UeRecord__CqiFeedback___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UeRecord__CqiFeedback___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UeRecord__CqiFeedback___gt__(PyObject *arg, std::vector< ns3::UeRecord::CqiFeedback > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::vector< double > > *obj;
} Pystd__vector__lt___std__vector__lt___double___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__vector__lt___double___gt_____gt__ *container;
    std::vector< std::vector< double > >::iterator *iterator;
} Pystd__vector__lt___std__vector__lt___double___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__vector__lt___double___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___std__vector__lt___double___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__vector__lt___double___gt_____gt__(PyObject *arg, std::vector< std::vector< double > > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::PdcchMapIdealControlMessage::IdealPdcchRecord > *obj;
} Pystd__list__lt___ns3__PdcchMapIdealControlMessage__IdealPdcchRecord___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__PdcchMapIdealControlMessage__IdealPdcchRecord___gt__ *container;
    std::list< ns3::PdcchMapIdealControlMessage::IdealPdcchRecord >::iterator *iterator;
} Pystd__list__lt___ns3__PdcchMapIdealControlMessage__IdealPdcchRecord___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__PdcchMapIdealControlMessage__IdealPdcchRecord___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__PdcchMapIdealControlMessage__IdealPdcchRecord___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__PdcchMapIdealControlMessage__IdealPdcchRecord___gt__(PyObject *arg, std::list< ns3::PdcchMapIdealControlMessage::IdealPdcchRecord > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::CqiIdealControlMessage::CqiFeedback > *obj;
} Pystd__list__lt___ns3__CqiIdealControlMessage__CqiFeedback___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__CqiIdealControlMessage__CqiFeedback___gt__ *container;
    std::list< ns3::CqiIdealControlMessage::CqiFeedback >::iterator *iterator;
} Pystd__list__lt___ns3__CqiIdealControlMessage__CqiFeedback___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__CqiIdealControlMessage__CqiFeedback___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__CqiIdealControlMessage__CqiFeedback___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__CqiIdealControlMessage__CqiFeedback___gt__(PyObject *arg, std::list< ns3::CqiIdealControlMessage::CqiFeedback > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::SpectrumPhy > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__SpectrumPhy___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__SpectrumPhy___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::SpectrumPhy > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__SpectrumPhy___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__SpectrumPhy___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__SpectrumPhy___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__SpectrumPhy___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::SpectrumPhy > > *container);

class PythonCallbackImpl0 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet___gt__(PyObject *value, ns3::Ptr< ns3::Packet > *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__RadioBearerInstance___gt__(PyObject *value, ns3::Ptr< ns3::RadioBearerInstance > *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__UeRecord___gt__(PyObject *value, ns3::Ptr< ns3::UeRecord > *address);


int _wrap_convert_py2c__ns3__UeRecord__CqiFeedback(PyObject *value, ns3::UeRecord::CqiFeedback *address);


int _wrap_convert_py2c__ns3__PdcchMapIdealControlMessage__IdealPdcchRecord(PyObject *value, ns3::PdcchMapIdealControlMessage::IdealPdcchRecord *address);


int _wrap_convert_py2c__ns3__CqiIdealControlMessage__CqiFeedback(PyObject *value, ns3::CqiIdealControlMessage::CqiFeedback *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__SpectrumPhy___gt__(PyObject *value, ns3::Ptr< ns3::SpectrumPhy > *address);

